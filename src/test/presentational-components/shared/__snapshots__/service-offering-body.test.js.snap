// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ServiceOfferingCardBody /> should render correctly 1`] = `
<ServiceOfferingCardBody
  display_name="display name"
  distributor="Red Hat"
  long_description="long description"
  name="Foo"
>
  <Styled(CardBody)>
    <CardBody
      className="sc-gKXOVf isvGLF"
    >
      <div
        className="pf-c-card__body sc-gKXOVf isvGLF"
      >
        <TextContent>
          <div
            className="pf-c-content"
          >
            <ConditionalLink>
              <Text
                component="h3"
                title="Foo"
              >
                <h3
                  className=""
                  data-ouia-component-id="OUIA-Generated-Text-1"
                  data-ouia-component-type="PF4/Text"
                  data-ouia-safe={true}
                  data-pf-content={true}
                  title="Foo"
                >
                  <styled.div>
                    <div
                      className="sc-jSMfEi fESZaG"
                    >
                      Foo
                    </div>
                  </styled.div>
                </h3>
              </Text>
            </ConditionalLink>
            <Text
              component="small"
            >
              <small
                className=""
                data-ouia-component-id="OUIA-Generated-Text-2"
                data-ouia-component-type="PF4/Text"
                data-ouia-safe={true}
                data-pf-content={true}
              >
                Red Hat
              </small>
            </Text>
          </div>
        </TextContent>
        <ItemDetails
          display_name="display name"
          long_description="long description"
          toDisplay={
            Array [
              "description",
            ]
          }
        >
          <Truncate
            ellipsis={
              <Tooltip
                content={<div />}
              >
                <span>
                  ...
                </span>
              </Tooltip>
            }
            key="tcard-prop-description"
            lines={3}
            trimWhitespace={false}
            width={0}
          >
            <span
              width={0}
            >
              <span />
              <span>
                <styled.div
                  key="card-prop-description"
                >
                  <div
                    className="sc-bczRLJ kBMtkl"
                  />
                </styled.div>
              </span>
              <span
                style={
                  Object {
                    "left": 0,
                    "position": "fixed",
                    "top": 0,
                    "visibility": "hidden",
                  }
                }
              >
                <Tooltip
                  content={<div />}
                >
                  <Popper
                    appendTo={[Function]}
                    distance={15}
                    enableFlip={true}
                    flipBehavior={
                      Array [
                        "top",
                        "right",
                        "bottom",
                        "left",
                        "top",
                        "right",
                        "bottom",
                      ]
                    }
                    isVisible={false}
                    onBlur={[Function]}
                    onDocumentClick={false}
                    onDocumentKeyDown={[Function]}
                    onFocus={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    onPopperMouseEnter={[Function]}
                    onPopperMouseLeave={[Function]}
                    onTriggerEnter={[Function]}
                    placement="top"
                    popper={
                      <div
                        aria-live="off"
                        className="pf-c-tooltip"
                        id="pf-tooltip-1"
                        role="tooltip"
                        style={
                          Object {
                            "maxWidth": null,
                            "opacity": 0,
                            "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                          }
                        }
                      >
                        <TooltipArrow />
                        <TooltipContent
                          isLeftAligned={false}
                        >
                          <div />
                        </TooltipContent>
                      </div>
                    }
                    popperMatchesTriggerWidth={false}
                    positionModifiers={
                      Object {
                        "bottom": "pf-m-bottom",
                        "bottom-end": "pf-m-bottom-right",
                        "bottom-start": "pf-m-bottom-left",
                        "left": "pf-m-left",
                        "left-end": "pf-m-left-bottom",
                        "left-start": "pf-m-left-top",
                        "right": "pf-m-right",
                        "right-end": "pf-m-right-bottom",
                        "right-start": "pf-m-right-top",
                        "top": "pf-m-top",
                        "top-end": "pf-m-top-right",
                        "top-start": "pf-m-top-left",
                      }
                    }
                    trigger={
                      <span>
                        ...
                      </span>
                    }
                    zIndex={9999}
                  >
                    <FindRefWrapper
                      onFoundRef={[Function]}
                    >
                      <span>
                        ...
                      </span>
                    </FindRefWrapper>
                  </Popper>
                </Tooltip>
              </span>
            </span>
          </Truncate>
        </ItemDetails>
      </div>
    </CardBody>
  </Styled(CardBody)>
</ServiceOfferingCardBody>
`;

exports[`<ServiceOfferingCardBody /> should render correctly with alternative values 1`] = `
<ServiceOfferingCardBody
  description="Bar"
  name="Foo"
>
  <Styled(CardBody)>
    <CardBody
      className="sc-gKXOVf isvGLF"
    >
      <div
        className="pf-c-card__body sc-gKXOVf isvGLF"
      >
        <TextContent>
          <div
            className="pf-c-content"
          >
            <ConditionalLink>
              <Text
                component="h3"
                title="Foo"
              >
                <h3
                  className=""
                  data-ouia-component-id="OUIA-Generated-Text-3"
                  data-ouia-component-type="PF4/Text"
                  data-ouia-safe={true}
                  data-pf-content={true}
                  title="Foo"
                >
                  <styled.div>
                    <div
                      className="sc-jSMfEi fESZaG"
                    >
                      Foo
                    </div>
                  </styled.div>
                </h3>
              </Text>
            </ConditionalLink>
          </div>
        </TextContent>
        <ItemDetails
          description="Bar"
          toDisplay={
            Array [
              "description",
            ]
          }
        >
          <Truncate
            ellipsis={
              <Tooltip
                content={
                  <div>
                    Bar
                  </div>
                }
              >
                <span>
                  ...
                </span>
              </Tooltip>
            }
            key="tcard-prop-description"
            lines={3}
            trimWhitespace={false}
            width={0}
          >
            <span
              width={0}
            >
              <span />
              <span>
                <styled.div
                  key="card-prop-description"
                >
                  <div
                    className="sc-bczRLJ kBMtkl"
                  >
                    Bar
                  </div>
                </styled.div>
              </span>
              <span
                style={
                  Object {
                    "left": 0,
                    "position": "fixed",
                    "top": 0,
                    "visibility": "hidden",
                  }
                }
              >
                <Tooltip
                  content={
                    <div>
                      Bar
                    </div>
                  }
                >
                  <Popper
                    appendTo={[Function]}
                    distance={15}
                    enableFlip={true}
                    flipBehavior={
                      Array [
                        "top",
                        "right",
                        "bottom",
                        "left",
                        "top",
                        "right",
                        "bottom",
                      ]
                    }
                    isVisible={false}
                    onBlur={[Function]}
                    onDocumentClick={false}
                    onDocumentKeyDown={[Function]}
                    onFocus={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    onPopperMouseEnter={[Function]}
                    onPopperMouseLeave={[Function]}
                    onTriggerEnter={[Function]}
                    placement="top"
                    popper={
                      <div
                        aria-live="off"
                        className="pf-c-tooltip"
                        id="pf-tooltip-2"
                        role="tooltip"
                        style={
                          Object {
                            "maxWidth": null,
                            "opacity": 0,
                            "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
                          }
                        }
                      >
                        <TooltipArrow />
                        <TooltipContent
                          isLeftAligned={false}
                        >
                          <div>
                            Bar
                          </div>
                        </TooltipContent>
                      </div>
                    }
                    popperMatchesTriggerWidth={false}
                    positionModifiers={
                      Object {
                        "bottom": "pf-m-bottom",
                        "bottom-end": "pf-m-bottom-right",
                        "bottom-start": "pf-m-bottom-left",
                        "left": "pf-m-left",
                        "left-end": "pf-m-left-bottom",
                        "left-start": "pf-m-left-top",
                        "right": "pf-m-right",
                        "right-end": "pf-m-right-bottom",
                        "right-start": "pf-m-right-top",
                        "top": "pf-m-top",
                        "top-end": "pf-m-top-right",
                        "top-start": "pf-m-top-left",
                      }
                    }
                    trigger={
                      <span>
                        ...
                      </span>
                    }
                    zIndex={9999}
                  >
                    <FindRefWrapper
                      onFoundRef={[Function]}
                    >
                      <span>
                        ...
                      </span>
                    </FindRefWrapper>
                  </Popper>
                </Tooltip>
              </span>
            </span>
          </Truncate>
        </ItemDetails>
      </div>
    </CardBody>
  </Styled(CardBody)>
</ServiceOfferingCardBody>
`;
